{"version":3,"sources":["app/models/pagination.ts","app/API/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","dataR","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","dataS","setServerError","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPreciate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","attende","cancelActivitytoggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesbyDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createhubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","SegmentGroup","Segment","Label","textAlign","Group","marginBottom","secondary","ActivityListItemAttendee","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","wrap","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","NavBar","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCHxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAACC,GAC5B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAIxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJtC,kBAKjBkB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACA,MAA0CA,EAAMJ,SAAxCnB,EAAR,EAAQA,KAAMwB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OAAQI,EAA9B,EAA8BA,QACxBQ,EAAQzB,EACd,OAAQwB,GACJ,KAAK,IAOD,GANqB,kBAAVC,GACPC,IAAMH,MAAME,GAEM,QAAlBZ,EAAOc,QAAoBF,EAAMG,OAAOC,eAAe,OACvDC,GAAQC,KAAK,cAEbN,EAAMG,OAAQ,CACd,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOR,EAAMG,OACjBH,EAAMG,OAAOK,IACZD,EAAiBD,KAAKN,EAAMG,OAAOK,IAG3C,MAAMD,EAAiBE,OAEvBR,IAAMH,MAAME,GAEhB,MACJ,KAAK,IACc,MAAXD,GAAkBP,EAAQ,oBAAoBkB,WAAW,kCACzDpB,EAAMqB,UAAUC,SAChBX,IAAMH,MAAM,yCAEhB,MACJ,KAAK,IACDO,GAAQC,KAAK,cACb,MACJ,KAAK,IACD,IAAMO,EAAQtC,EACde,EAAMC,YAAYuB,eAAeD,GACjCR,GAAQC,KAAK,qBAQzB,IAAMS,EAAe,SAAIrB,GAAJ,OAAmCA,EAASnB,MAE3DW,EACG,SAAI8B,GAAJ,OAAoBnC,IAAMoC,IAAOD,GAAKE,KAAKH,IAD9C7B,EAEI,SAAI8B,EAAaG,GAAjB,OAA8BtC,IAAMuC,KAAQJ,EAAKG,GAAMD,KAAKH,IAFhE7B,EAGG,SAAI8B,EAAaG,GAAjB,OAA8BtC,IAAMwC,IAAOL,EAAKG,GAAMD,KAAKH,IAH9D7B,EAIG,SAAI8B,GAAJ,OAAoBnC,IAAMyC,OAAUN,GAAKE,KAAKH,IA2CxCQ,EAND,CACVC,WAnCe,CACfC,KAAM,SAACC,GAAD,OAA6B7C,IAAMoC,IAAiC,cAAe,CAACS,WAASR,KAAKH,IACxGY,QAAS,SAACC,GAAD,OAAgB1C,EAAA,sBAAqC0C,KAC9DC,OAAQ,SAACC,GAAD,OAAkC5C,EAAmB,cAAe4C,IAC5EC,OAAQ,SAACD,GAAD,OAAkC5C,EAAA,sBAAiC4C,EAASF,IAAME,IAC1FR,OAAQ,SAACM,GAAD,OAAgB1C,EAAA,sBAAiC0C,KACzDI,OAAQ,SAACJ,GAAD,OAAgB1C,EAAA,sBAAkC0C,EAAlC,WAA+C,MA8BvEK,QA3BY,CACZC,QAAU,kBAAMhD,EAAkB,aAClCiD,MAAO,SAACC,GAAD,OAA0BlD,EAAmB,iBAAkBkD,IACtEC,SAAU,SAACD,GAAD,OAA0BlD,EAAmB,oBAAqBkD,IAC5EE,QAAS,SAACC,GAAD,OAAyBrD,EAAA,uCAAmDqD,GAAe,KACpGC,aAAc,kBAAMtD,EAAmB,wBAAyB,MAuBhEuD,SApBa,CACbxB,IAAK,SAACyB,GAAD,OAAsBxD,EAAA,oBAAkCwD,KAC7DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB/D,IAAMuC,KAAY,SAAUyB,EAAU,CACzCrD,QAAS,CAAC,eAAgB,0BAGlCwD,aAAc,SAACpB,GAAD,OAAgB1C,EAAA,kBAAwB0C,EAAxB,YAAsC,KACpEqB,YAAa,SAACrB,GAAD,OAAgB1C,EAAA,kBAAuB0C,KACpDsB,cAAe,SAACC,GAAD,OAA+BjE,EAAA,YAAyBiE,IACvEC,gBAAiB,SAACV,GAAD,OAAsBxD,EAAA,kBAAwBwD,GAAY,KAC3EW,eAAgB,SAACX,EAAkBY,GAAnB,OAAyCpE,EAAA,kBAAkCwD,EAAlC,sBAAwDY,KACjHC,eAAgB,SAACb,EAAkBY,GAAnB,OAAyCpE,EAAA,oBAAyCwD,EAAzC,iCAA0EY,OCrG1HE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAOlF,KAAMgF,IAIfG,EAST,WAAY9B,GAAgC,yBAR5CF,QAAciC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAuB,GAKoB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRrC,IACArD,KAAKmD,GAAKE,EAASF,GACnBnD,KAAKqF,MAAQhC,EAASgC,MACtBrF,KAAKsF,SAAWjC,EAASiC,SACzBtF,KAAKuF,YAAclC,EAASkC,YAC5BvF,KAAKwF,KAAOnC,EAASmC,KACrBxF,KAAK0F,MAAQrC,EAASqC,MACtB1F,KAAKyF,KAAOpC,EAASoC,OC5BpBE,EACT,WAAYhC,GAAa,oBACrB3D,KAAKiE,SAAWN,EAAKM,SACrBjE,KAAK4F,YAAcjC,EAAKiC,YACxB5F,KAAK6F,MAAQlC,EAAKkC,OCTLC,E,WAUnB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdrG,WAAgC,KAIlB,KAHdsG,aAAe,IAAIpG,EAGL,KAFd4E,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAcdC,gBAAkB,SAACF,GACjB,EAAKA,aAAeA,GAfR,KAkBdG,aAAe,SAAC3B,EAAmB4B,GACjC,IAAMC,EAAgB,WACpB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAO1E,GACjB,cAARA,GAAqB,EAAK8C,UAAUhC,OAAOd,OAInD,OAAQ8C,GACN,IAAK,MACH6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACF,IAAK,UACHI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACF,IAAK,SACHI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACF,IAAK,YACH,EAAKzB,UAAUhC,OAAO,aACtB,EAAKgC,UAAUyB,IAAI,YAAaG,KAxCxB,KA2EdG,eA3Ec,sBA2EG,4BAAA1F,EAAA,6DACf,EAAKkF,gBAAiB,EADP,kBAGQtD,EAAMC,WAAWC,KAAK,EAAK6D,aAHnC,QAGPC,EAHO,QAINhH,KAAK6G,SAAQ,SAAAtD,GAClB,EAAK0D,YAAY1D,MAEnB,EAAK2D,cAAcF,EAAO/G,YAC1B,EAAKkH,mBAAkB,GARV,kDAUbC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXV,0DA3EH,KA0FdD,cAAgB,SAACjH,GACf,EAAKA,WAAaA,GA3FN,KA8FdqH,aA9Fc,uCA8FC,WAAOjE,GAAP,eAAAjC,EAAA,2DACTmC,EAAW,EAAKgE,YAAYlE,IADnB,uBAGX,EAAK8C,iBAAmB5C,EAHb,kBAIJA,GAJI,cAMX,EAAK+C,gBAAiB,EANX,mBAQQtD,EAAMC,WAAWG,QAAQC,GARjC,eAQTE,EARS,OAST,EAAK0D,YAAY1D,GACjBiE,aAAY,WACV,EAAKrB,iBAAmB5C,KAE1B,EAAK4D,mBAAkB,GAbd,kBAcF5D,GAdE,kCAgBT6D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBd,0DA9FD,2DAoHNF,YAAc,SAAC1D,GACrB,IACU,EADJM,EAAO9C,EAAMqB,UAAUyB,KACzBA,IACFN,EAASkE,QAAUlE,EAASmE,UAAWC,MACrC,SAAAvG,GAAC,OAAIA,EAAE+C,WAAaN,EAAKM,YAE3BZ,EAASqE,OAASrE,EAASsE,eAAiBhE,EAAKM,SACjDZ,EAASuE,KAAT,UAAgBvE,EAASmE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE7D,WAAaZ,EAASsE,iBAExEtE,EAASmC,KAAO,IAAIuC,KAAK1E,EAASmC,MAClC,EAAKO,iBAAiBO,IAAIjD,EAASF,GAAIE,IA9H3B,KAiINgE,YAAc,SAAClE,GACrB,OAAO,EAAK4C,iBAAiBvD,IAAIW,IAlIrB,KAqId8D,kBAAoB,SAACe,GACnB,EAAK5B,eAAiB4B,GAtIV,KAyIdC,eAzIc,uCAyIG,WAAO5E,GAAP,mBAAAnC,EAAA,6DACTyC,EAAO9C,EAAMqB,UAAUyB,KACvBuE,EAAW,IAAIvC,EAAQhC,GAFd,kBAIPb,EAAMC,WAAWK,OAAOC,GAJjB,QAKP8E,EAAc,IAAIpD,EAAS1B,IACrBsE,aAAehE,EAAMM,SACjCkE,EAAYX,UAAY,CAACU,GACzB,EAAKnB,YAAYoB,GACjBb,aAAY,WACV,EAAKrB,iBAAmBkC,KAVb,kDAabjB,QAAQC,IAAR,MAba,0DAzIH,2DA0JdiB,eA1Jc,uCA0JG,WAAO/E,GAAP,SAAAnC,EAAA,+EAEP4B,EAAMC,WAAWO,OAAOD,GAFjB,OAGbiE,aAAY,WACV,GAAIjE,EAASF,GAAI,CACf,IAAIkF,EAAe,2BAAQ,EAAKhB,YAAYhE,EAASF,KAAQE,GAC7D,EAAK0C,iBAAiBO,IAAIjD,EAASF,GAAIkF,GACvC,EAAKpC,iBAAmBoC,MAPf,+CAWbnB,QAAQC,IAAR,MAXa,wDA1JH,2DAyKdmB,eAzKc,uCAyKG,WAAOnF,GAAP,SAAAjC,EAAA,6DACf,EAAKiF,SAAU,EADA,kBAGPrD,EAAMC,WAAWF,OAAOM,GAHjB,OAIbmE,aAAY,WACV,EAAKvB,iBAAiBlD,OAAOM,GAC7B,EAAKgD,SAAU,KANJ,gDASbe,QAAQC,IAAR,MACAG,aAAY,WACV,EAAKnB,SAAU,KAXJ,yDAzKH,2DAyLdoC,iBAzLc,sBAyLK,4BAAArH,EAAA,6DACXyC,EAAO9C,EAAMqB,UAAUyB,KAC7B,EAAKwC,SAAU,EAFE,kBAITrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAJtC,OAKfmE,aAAY,WAAO,IAAD,EAChB,aAAI,EAAKrB,wBAAT,aAAI,EAAuBsB,QAAS,CAAC,IAAD,EAClC,EAAKtB,iBAAiBuB,UAAtB,UAAkC,EAAKvB,iBAAiBuB,iBAAxD,aAAkC,EAAiCgB,QAAO,SAAAtH,GAAC,OAAIA,EAAE+C,YAAF,OAAeN,QAAf,IAAeA,OAAf,EAAeA,EAAMM,aACpG,EAAKgC,iBAAiBsB,SAAU,MAC3B,CAAC,IAAD,IACCkB,EAAU,IAAI9C,EAAQhC,GAC5B,YAAKsC,wBAAL,mBAAuBuB,iBAAvB,SAAkC3F,KAAK4G,GACvC,EAAKxC,iBAAkBsB,SAAU,EAEnC,EAAKxB,iBAAiBO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBAd7C,gDAiBfiB,QAAQC,IAAR,MAjBe,yBAmBfG,aAAY,kBAAM,EAAKnB,SAAU,KAnBlB,4EAzLL,KAgNduC,qBAhNc,sBAgNS,sBAAAxH,EAAA,6DACrB,EAAKiF,SAAU,EADM,kBAGbrD,EAAMC,WAAWQ,OAAO,EAAK0C,iBAAkB9C,IAHlC,OAInBmE,aAAY,WAAO,IAAD,EAChB,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IAAI,EAAKL,iBAAkB9C,GAAI,EAAK8C,qBANzC,gDASnBiB,QAAQC,IAAR,MATmB,yBAWnBG,aAAY,kBAAM,EAAKnB,SAAU,KAXd,4EAhNT,KA+NdyC,sBAAwB,WACtB,EAAK3C,sBAAmBb,GAhOZ,KAmOdyD,wBAA0B,SAAC5E,GACzB,EAAK8B,iBAAiBY,SAAQ,SAAAtD,GAC5BA,EAASmE,UAAUb,SAAQ,SAAAuB,GACrBA,EAASjE,WAAaA,IACxBiE,EAASY,UAAYZ,EAASa,iBAAmBb,EAASa,iBAC1Db,EAASY,WAAaZ,EAASY,kBAvOrCE,YAAmBhJ,MAEnBiJ,aACE,kBAAM,EAAKpE,UAAUqE,UACrB,WACE,EAAK7C,aAAe,IAAIpG,EACxB,EAAK8F,iBAAiBoD,QACtB,EAAKvC,oB,6CAqCX,WACE,IAAM3D,EAAS,IAAImG,gBAUnB,OATAnG,EAAOqB,OAAO,aAActE,KAAKqG,aAAanG,WAAWmJ,YACzDpG,EAAOqB,OAAO,WAAYtE,KAAKqG,aAAalG,SAASkJ,YACrDrJ,KAAK6E,UAAU8B,SAAQ,SAACF,EAAO1E,GACjB,cAARA,EACFkB,EAAOqB,OAAOvC,EAAM0E,EAAe6C,eAEnCrG,EAAOqB,OAAOvC,EAAK0E,MAGhBxD,I,4BAIT,WACE,OAAOsG,MAAMC,KAAKxJ,KAAK+F,iBAAiB0D,UAAUC,MAAK,SAACxI,EAAGyI,GAAJ,OACrDzI,EAAEsE,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,6BAGhC,WACE,OAAO3E,OAAO4E,QACZ7J,KAAK8J,iBAAiBC,QAAO,SAACC,EAAY3G,GACxC,IAAMmC,EAAOyE,YAAO5G,EAASmC,KAAO,eAEpC,OADAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBAAuBwE,EAAWxE,IAAlC,CAAyCnC,IAAY,CAACA,GAClE2G,IACN,S,qBCpFYE,E,WAWjB,aAAe,IAAD,gCAVdxF,QAA0B,KAUZ,KATdyF,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdjE,SAAU,EAOI,KANdkE,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA4BdI,YA5Bc,uCA4BA,WAAO1G,GAAP,eAAA/C,EAAA,6DACV,EAAKiJ,gBAAiB,EADZ,kBAGgBrH,EAAMkB,SAASxB,IAAIyB,GAHnC,OAGAS,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKyF,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA5BA,2DA0CdjG,YA1Cc,uCA0CA,WAAOC,GAAP,iBAAAjD,EAAA,6DACV,EAAKkJ,WAAY,EADP,kBAGiBtH,EAAMkB,SAASE,YAAYC,GAH5C,OAGAlD,EAHA,OAIA2J,EAAQ3J,EAASnB,KACvBwH,aAAY,WACJ,EAAK5C,UACL,EAAKA,QAAQmG,OAAOhJ,KAAK+I,GACrBA,EAAME,QAAUjK,EAAMqB,UAAUyB,OAChC9C,EAAMqB,UAAU6I,SAASH,EAAMrI,KAC/B,EAAKmC,QAAQmB,MAAQ+E,EAAMrI,MAGnC,EAAK6H,WAAY,KAbf,gDAiBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAlB7B,yDA1CA,2DAgEd7F,aAhEc,uCAgEC,WAAOqG,GAAP,SAAA1J,EAAA,6DACX,EAAKiF,SAAU,EADJ,kBAGDrD,EAAMkB,SAASO,aAAaqG,EAAMzH,IAHjC,OAIPtC,EAAMqB,UAAU6I,SAASH,EAAMrI,KAC/B+E,aAAY,WACJ,EAAK5C,SAAW,EAAKA,QAAQmG,SAC7B,EAAKnG,QAAQmG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKpG,QAAQmG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAE7H,KAAOyH,EAAMzH,MAAK2H,QAAS,EAC3D,EAAKpG,QAAQmB,MAAQ+E,EAAMrI,IAC3B,EAAK4D,SAAU,MAVhB,gDAePmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAhBO,yDAhED,2DAoFd3C,YApFc,uCAoFA,WAAOoG,GAAP,SAAA1J,EAAA,6DACV,EAAKiF,SAAU,EADL,kBAGArD,EAAMkB,SAASQ,YAAYoG,EAAMzH,IAHjC,OAINmE,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,EAAKA,QAAQmG,OAAb,UAAsB,EAAKnG,QAAQmG,cAAnC,aAAsB,EAAqBrC,QAAO,SAAAwC,GAAC,OAAIA,EAAE7H,KAAOyH,EAAMzH,MACtE,EAAKgD,SAAU,MAPjB,gDAYNmB,aAAY,kBAAM,EAAKnB,SAAU,KACjCe,QAAQC,IAAR,MAbM,yDApFA,2DAoGd1C,cApGc,uCAoGE,WAAOC,GAAP,SAAAxD,EAAA,6DACZ,EAAKiF,SAAU,EADH,kBAGFrD,EAAMkB,SAASS,cAAcC,GAH3B,OAIR4C,aAAY,WAAO,IAAD,EACV5C,EAAQkB,aAAelB,EAAQkB,eAAR,UACvB/E,EAAMqB,UAAUyB,YADO,aACvB,EAAsBiC,cACtB/E,EAAMqB,UAAU+I,eAAevG,EAAQkB,aAE3C,EAAKlB,QAAL,2BAAoB,EAAKA,SAAYA,GACrC,EAAKyB,SAAU,KAVX,gDAaRe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAdzB,yDApGF,2DAsHdxB,gBAtHc,uCAsHI,WAAOV,EAAkB6E,GAAzB,SAAA5H,EAAA,6DACd,EAAKiF,SAAU,EADD,kBAGJrD,EAAMkB,SAASW,gBAAgBV,GAH3B,OAIVpD,EAAMqK,cAAcrC,wBAAwB5E,GAC5CqD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQT,YAAb,UAA0BpD,EAAMqB,UAAUyB,YAA1C,aAA0B,EAAsBM,WAAY,EAAKS,QAAQT,WAAaA,IACtG6E,EAAY,EAAKpE,QAAQqE,iBAAmB,EAAKrE,QAAQqE,iBACzD,EAAKrE,QAAQoE,WAAa,EAAKpE,QAAQoE,WAEvC,EAAKpE,SAAW,EAAKA,QAAQT,YAAb,UAA0BpD,EAAMqB,UAAUyB,YAA1C,aAA0B,EAAsBM,YAChE6E,EAAY,EAAKpE,QAAQyG,iBAAmB,EAAKzG,QAAQyG,kBAE7D,EAAKd,WAAW1D,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQoE,UAAYpE,EAAQqE,iBAAmBrE,EAAQqE,iBACvDrE,EAAQoE,WAAapE,EAAQoE,cAGrC,EAAK3C,SAAU,KAnBT,gDAuBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAxBvB,yDAtHJ,6DAiJdiF,eAjJc,uCAiJG,WAAOvG,GAAP,eAAA3D,EAAA,6DACb,EAAKoJ,mBAAoB,EADZ,kBAGgBxH,EAAMkB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHwF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDAUTpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,mBAAoB,KAXlC,yDAjJH,2DAgKde,mBAhKc,uCAgKO,WAAOpH,EAAkBY,GAAzB,eAAA3D,EAAA,6DACjB,EAAKuJ,mBAAoB,EADR,kBAGY3H,EAAMkB,SAASc,eAAeb,EAAUY,GAHpD,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKkD,eAAiBR,EACtB,EAAKS,mBAAoB,KANhB,gDASbvD,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKmD,mBAAoB,KAXhB,yDAhKP,wDACVzB,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKsB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM1F,EAA0B,IAAd0F,EAAkB,YAAc,YAClD,EAAKa,eAAevG,QAEpB,EAAKwF,WAAa,M,+CAWlC,WACI,SAAIxJ,EAAMqB,UAAUyB,OAAQ3D,KAAK0E,UACtB7D,EAAMqB,UAAUyB,KAAKM,WAAajE,KAAK0E,QAAQT,a,KCjC7CqH,E,WAMjB,aAAe,IAAD,gCALd3H,KAAoB,KAKN,KAJd4H,cAA+B,KAIjB,KAHdC,WAAY,EAGE,KAFdC,yBAEc,OAQd/H,MARc,uCAQN,WAAOgI,GAAP,eAAAxK,EAAA,+EAEmB4B,EAAMU,QAAQE,MAAMgI,GAFvC,OAEM/H,EAFN,OAGA9C,EAAMC,YAAY6K,SAAShI,EAAK/C,OAChC,EAAKgL,uBAAuBjI,GAC5B2D,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B/B,GAAQC,KAAK,eACbhB,EAAMgL,WAAWC,aAPjB,uHARM,2DAqBd3J,OAAS,WACLtB,EAAMC,YAAY6K,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKtI,KAAO,KACZ/B,GAAQC,KAAK,MAzBH,KA4BdqK,QA5Bc,sBA4BJ,4BAAAhL,EAAA,+EAEiB4B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGF9C,EAAMC,YAAY6K,SAAShI,EAAK/C,OAChC0G,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B,EAAKiI,uBAAuBjI,GAL1B,gDAOFuD,QAAQC,IAAR,MAPE,yDA5BI,KAuCdvD,SAvCc,uCAuCH,WAAO8H,GAAP,eAAAxK,EAAA,sEAEHgG,QAAQC,IAAI,sBACZD,QAAQC,IAAI,SACZD,QAAQC,IAAIuE,GAJT,SAKgB5I,EAAMU,QAAQI,SAAS8H,GALvC,OAKG/H,EALH,OAMHuD,QAAQC,IAAI,QACZD,QAAQC,IAAIxD,GACZ9C,EAAMC,YAAY6K,SAAShI,EAAK/C,OAChC,EAAKgL,uBAAuBjI,GAC5B2D,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B/B,GAAQC,KAAK,eACbhB,EAAMgL,WAAWC,aAZd,uHAvCG,2DAyDdf,SAAW,SAAClF,GACJ,EAAKlC,OAAM,EAAKA,KAAKkC,MAAQA,IA1DvB,KA6DdoF,eAAiB,SAACkB,GACV,EAAKxI,OAAM,EAAKA,KAAKiC,YAAcuG,IA9D7B,KAiEdC,uBAjEc,sBAiEW,sBAAAlL,EAAA,sDACrB6K,OAAOM,GAAGC,gBAAe,SAAArL,GACG,cAApBA,EAASK,SACT,EAAKiK,cAAgBtK,EAASsL,aAAazI,gBAH9B,2CAjEX,KA0Ed0I,cAAgB,WACZ,EAAKhB,WAAY,EACjB,IAAMiB,EAAW,SAAC3I,GACdhB,EAAMU,QAAQK,QAAQC,GAAarB,MAAK,SAAAkB,GACpC9C,EAAMC,YAAY6K,SAAShI,EAAK/C,OAChC,EAAKgL,uBAAuBjI,GAC5B2D,aAAY,WACR,EAAK3D,KAAOA,EACZ,EAAK6H,WAAY,KAErB5J,GAAQC,KAAK,kBACd6K,OAAM,SAAArL,GACL6F,QAAQC,IAAI9F,GACZiG,aAAY,kBAAM,EAAKkE,WAAY,SAGvC,EAAKD,cACLkB,EAAS,EAAKlB,eAEdQ,OAAOM,GAAG3I,OAAM,SAAAzC,GACZwL,EAASxL,EAASsL,aAAazI,eAChC,CAAE6I,MAAO,0BA/FN,KAmGd5I,aAnGc,sBAmGC,4BAAA7C,EAAA,6DACX,EAAK0L,wBADM,kBAGY9J,EAAMU,QAAQO,eAH1B,OAGDJ,EAHC,OAIP2D,aAAY,kBAAM,EAAK3D,KAAOA,KAC9B9C,EAAMC,YAAY6K,SAAShI,EAAK/C,OAChC,EAAKgL,uBAAuBjI,GANrB,kDAQPuD,QAAQC,IAAR,MARO,0DAlGX6B,YAAmBhJ,M,4CAGvB,WACI,QAASA,KAAK2D,O,oCA0GlB,SAA+BA,GAC3B,IAAMkJ,EAAW1L,KAAKC,MAAM0L,KAAKnJ,EAAK/C,MAAMmM,MAAM,KAAK,KAEjDC,EADU,IAAIjF,KAAoB,IAAf8E,EAASI,KACVrD,UAAY7B,KAAKmF,MAAS,IAClDlN,KAAKyL,oBAAsB0B,WAAWnN,KAAK+D,aAAciJ,K,mCAG7D,WACII,aAAapN,KAAKyL,yB,KClHb5K,EAAe,CACxBqK,cAAe,IAAIpF,EACnBhF,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuBmL,OAAOC,aAAaqB,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAedjL,eAAiB,SAAChB,GACd,EAAKA,MAAQA,GAhBH,KAmBdsK,SAAW,SAAC/K,GACR,EAAKA,MAAQA,GApBH,KAuBd2M,aAAe,WACb,EAAKD,WAAY,GAvBftE,YAAmBhJ,MAEnBiJ,aACI,kBAAM,EAAKrI,SACX,SAAAA,GACMA,EACAmL,OAAOC,aAAawB,QAAQ,MAAO5M,GAEnCmL,OAAOC,aAAaC,WAAW,WDG7C/J,UAAW,IAAIoJ,EACfO,WAAY,IERZ,aAAe,IAAD,gCALd4B,MAAe,CACXC,MAAM,EACNhL,KAAM,MAGI,KAIdiL,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAM/K,KAAOkL,GANR,KASd9B,WAAa,WACT,EAAK2B,MAAMC,MAAO,EAClB,EAAKD,MAAM/K,KAAO,MAVlBsG,YAAmBhJ,OFQvB6N,aAAc,IAAI3D,EAClB4D,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfrN,EAAMqK,cAAcjF,mBACpB,EAAK+H,eAAgB,IAAIG,KACpBC,QAAQ7N,oBAAkD2N,EAAY,CACnEG,mBAAoB,kCAAMxN,EAAMqB,UAAUyB,YAAtB,aAAM,EAAsB/C,SAEnD0N,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQjC,OAAM,SAAArL,GAAK,OAAI6F,QAAQC,IAAI,sCAAuC9F,MAE7F,EAAK2M,cAAcY,GAAG,gBAAgB,SAACb,GACnCzG,aAAY,WACRyG,EAASpH,SAAS,SAAAkI,GACdA,EAAQC,UAAY,IAAI/G,KAAK8G,EAAQC,UAAY,QAErD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrCvH,aAAY,WACRuH,EAAQC,UAAY,IAAI/G,KAAK8G,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKhB,qBAAL,SAAoBiB,OAAOvC,OAAM,SAAArL,GAAK,OAAI6F,QAAQC,IAAI,8BAA+B9F,OAnC3E,KAsCd6N,cAAgB,WACd,EAAKnB,SAAW,GAChB,EAAKiB,qBAxCO,KA2CdG,WA3Cc,uCA2CD,WAAO1F,GAAP,iBAAAvI,EAAA,6DACXuI,EAAOyE,WAAP,UAAoBrN,EAAMqK,cAAcjF,wBAAxC,aAAoB,EAAsC9C,GAD/C,4BAGD,EAAK6K,qBAHJ,aAGD,EAAoBoB,OAAO,cAAe3F,GAHzC,sDAKPvC,QAAQC,IAAR,MALO,wDA3CC,sDACV6B,YAAmBhJ,QHgBdqP,EAAeC,wBAAczO,GAEnC,SAAS0O,IACZ,OAAOC,qBAAWH,G,WIxBPI,eAAS,WACpB,MAAwCF,IAAhCrN,UAAayB,EAArB,EAAqBA,KAAMxB,EAA3B,EAA2BA,OAC3B,OACI,cAACuN,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,YAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAc9D,KAAK,eAC9C,cAACuD,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAU9D,KAAK,WAC1C,cAACuD,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASC,GAAG,kBAAkBQ,UAAQ,EAAC7C,QAAQ,sBAE/D,eAAC8B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJzM,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,QAAS,mBAAoB+K,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAErN,QAAF,IAAEA,OAAF,EAAEA,EAAMiC,YAA1C,SACI,eAACkL,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMhB,GAAE,2BAAetM,QAAf,IAAeA,OAAf,EAAeA,EAAMM,UAAY+M,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAAShP,EAAQ6O,KAAK,SAASE,KAAK,0B,8DCnBhEzB,eAAS,WACpB,MAAuDF,IAA/CrE,cAAiBrG,EAAzB,EAAyBA,UAAW2B,EAApC,EAAoCA,aACpC,OACI,qCACI,eAACkJ,EAAA,EAAD,CAAM0B,UAAQ,EAACC,KAAK,QAAQf,MAAO,CAAEgB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAO9D,QAAQ,YACpD,cAAC8B,EAAA,EAAKI,KAAN,CACIlC,QAAQ,iBACR+D,OAAQ9M,EAAU+M,IAAI,OACtBT,QAAS,kBAAM3K,EAAa,MAAO,WAEvC,cAACkJ,EAAA,EAAKI,KAAN,CACIlC,QAAQ,YACR+D,OAAQ9M,EAAU+M,IAAI,WACtBT,QAAS,kBAAM3K,EAAa,UAAW,WAE3C,cAACkJ,EAAA,EAAKI,KAAN,CACIlC,QAAQ,cACR+D,OAAQ9M,EAAU+M,IAAI,UACtBT,QAAS,kBAAM3K,EAAa,SAAU,cAG9C,cAACgL,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAACrM,GAAD,OAAgBgB,EAAa,YAAahB,IACpDiB,MAAO5B,EAAUrC,IAAI,cAAgB,IAAIuF,a,yFCpB1C0H,gBAAS,YAA2C,IAAD,EAAlB/K,EAAkB,EAAlBA,QAC5C,EAAoC6K,IAA5B1B,EAAR,EAAQA,aAAc3L,EAAtB,EAAsBA,UACdyC,EAA6BkJ,EAA7BlJ,gBAAiBwB,EAAY0H,EAAZ1H,QAEzB,IAAI,UAAAjE,EAAUyB,YAAV,eAAgBM,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAAC6N,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC3B,MAAO,CAAEgB,MAAO,QAAxC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAM,OACN9D,QAASlJ,EAAQoE,UAAY,YAAc,oBAGnD,cAACgJ,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC7B,MAAO,CAAEgB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLE,OAAK,EACLV,MAAOhN,EAAQoE,UAAY,MAAQ,QACnC8E,QAASlJ,EAAQoE,UAAY,WAAa,SAC1C3C,QAASA,EACTgL,QAAS,SAACkB,GAAD,OArBzB,SAAsBA,EAAmBpO,GACrCoO,EAAEC,iBACF5N,EAAQoE,UAAYnE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBrDsO,CAAaF,EAAG3N,EAAQT,qBC7B7CwL,gBAAS,YAA0C,IAAnB/K,EAAkB,EAAlBA,QAM3C,OACI,eAAC8N,GAAA,EAAD,CAAMzC,GAAIkB,IAAMhB,GAAE,oBAAevL,EAAQT,UAAzC,UACI,cAAC0M,EAAA,EAAD,CAAOP,IAAK1L,EAAQmB,OAAS,qBAC7B,eAAC2M,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,UAAc9M,EAAQkB,cACtB,cAAC4M,GAAA,EAAKC,YAAN,UAVZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EAQjCG,CAASnO,EAAQoO,UAExC,eAACN,GAAA,EAAKR,QAAN,CAAce,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAM7G,KAAK,SACVzH,EAAQqE,eAFb,gBAIA,cAAC,GAAD,CAAcrE,QAASA,UCdpB+K,gBAAS,YAAyD,IAArBjI,EAAoB,EAApBA,UAElDyL,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACK7L,EAAU8L,KAAI,SAAApL,GAAQ,OACnB,cAACqL,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,GAAA,EAAKtD,KAAN,CAAmCC,GAAIkB,IAAMhB,GAAE,oBAAe/H,EAASjE,UAAvE,SACI,cAAC0M,EAAA,EAAD,CACIU,KAAK,OACLqC,UAAQ,EACRtD,IAAKlI,EAASrC,OAAS,mBACvB8N,UAAQ,EACRrD,MAAOpI,EAASY,UAAYmK,EAAS,QAN7B/K,EAASjE,UAJjC,SAeI,cAACsP,GAAA,EAAMvB,QAAP,UACI,cAAC,GAAD,CAAatN,QAASwD,OAdrBA,EAASjE,kBCbnB,SAAS2P,GAAT,GAAgD,IAAD,IAAnBvQ,EAAmB,EAAnBA,SACvC,OACI,eAACwQ,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACKzQ,EAASsF,aACN,cAACoL,GAAA,EAAD,CAAOtC,SAAS,MAAMC,MAAM,MAAM9D,QAAQ,YAAY0C,MAAO,CAAC0D,UAAW,YAE7E,cAAClE,GAAA,EAAKmE,MAAN,UACI,eAACnE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYL,MAAO,CAAC4D,aAAc,GAAI7C,KAAK,OAAOqC,UAAQ,EAACtD,KAAK,UAAA/M,EAASuE,YAAT,eAAe/B,QAAQ,qBACvF,eAACiK,GAAA,EAAKkC,QAAN,WACI,cAAClC,GAAA,EAAK0B,OAAN,CAAazB,GAAIkB,IAAMhB,GAAE,sBAAiB5M,EAASF,IAAnD,SACKE,EAASgC,QAEd,eAACyK,GAAA,EAAK2C,YAAN,uBAEI,cAAC,IAAD,CAAMxC,GAAE,oBAAe5M,EAASsE,cAAhC,SAAkD,eAAMtE,EAASuE,YAAf,aAAM,EAAehC,kBAE1EvC,EAASqE,QACN,cAACoI,GAAA,EAAK2C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,SAAnB,+BAKPrO,EAASkE,UAAYlE,EAASqE,QAC3B,cAACoI,GAAA,EAAK2C,YAAN,UACI,cAACsB,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,QAAnB,wCASxB,cAACoC,GAAA,EAAD,UACI,iCACI,cAACd,GAAA,EAAD,CAAM7G,KAAK,UADf,IAC2BlC,YAAO5G,EAASmC,KAAO,wBAC9C,cAACwN,GAAA,EAAD,CAAM7G,KAAK,WAFf,IAE4B9I,EAASqC,WAGzC,cAACoO,GAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAACC,GAAD,CAA0B5M,UAAWnE,EAASmE,cAElD,eAACsM,GAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,+BAAOhR,EAASkC,cAChB,cAACiL,EAAA,EAAD,CACIT,GAAIkB,IACJhB,GAAE,sBAAiB5M,EAASF,IAC5BuO,MAAM,OACN4C,QAAQ,QACR1G,QAAQ,eCxDb6B,oBAAS,WACpB,IACQ8E,EADkBhF,IAAlBrE,cACAqJ,kBAER,OACI,mCACKA,EAAkBjB,KAAI,mCAAEkB,EAAF,KAASxK,EAAT,YACnB,eAAC,WAAD,WACI,cAACwH,EAAA,EAAD,CAAQiD,KAAG,EAAC/C,MAAM,OAAlB,SACK8C,IAEJxK,EAAWsJ,KAAI,SAAAjQ,GAAQ,OACpB,cAACuQ,GAAD,CAAoCvQ,SAAUA,GAAvBA,EAASF,SALzBqR,W,UCVhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAazC,OAAK,EAAC5B,MAAO,CAAEiB,UAAW,IAAvC,SACI,eAACuC,GAAA,EAAQG,MAAT,WACI,cAACH,GAAA,EAAD,CAASxD,MAAO,CAAEsE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYnD,OAAb,CAAoB3L,OAAK,EAAzB,UACI,cAAC8O,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACf,GAAA,EAAD,UACI,eAACa,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACf,GAAA,EAAD,CAASK,WAAS,EAAC7D,MAAO,CAAEsE,UAAW,MACvC,cAACd,GAAA,EAAD,CAASO,UAAQ,EAAjB,SACI,cAAC7D,EAAA,EAAD,CAAQuE,UAAQ,EAACrD,MAAM,OAAO4C,QAAQ,QAAQ1G,QAAQ,kBCjB/D6B,oBAAS,WAEpB,IAAQvE,EAAkBqE,IAAlBrE,cACAtE,EAAkEsE,EAAlEtE,eAAgBb,EAAkDmF,EAAlDnF,iBAAkBQ,EAAgC2E,EAAhC3E,gBAAiBxG,EAAemL,EAAfnL,WAC3D,EAAsCiV,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACFpP,EAAiBsL,MAAQ,GAAGzK,MACjC,CAACb,EAAiBsL,KAAMzK,IAGvB,eAACwO,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAM,KAAnB,SACKpG,EAAc9E,iBAAmB6O,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIY,UAAW,EACXC,SArBpB,WACIL,GAAe,GACf3O,EAAgB,IAAItG,EAAaF,EAAYyV,YAAc,IAC3D5O,IAAiBnE,MAAK,kBAAMyS,GAAe,OAmB3BO,SAAUR,KAAiBlV,GAAcA,EAAWyV,YAAczV,EAAW2V,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAKZ,cAACP,EAAA,EAAKC,OAAN,CAAa/D,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAAC8D,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,cAACsE,EAAA,EAAD,CAAQjE,OAAQsD,Y,sCCvCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAM3J,MAArC,mBAAO6J,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY9U,MAAO4U,EAAKG,WAAaH,EAAK5U,MAA1C,UACI,gCAAQyU,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAK5U,MAClB,cAAC0S,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,MAAnB,SAA0BuE,EAAK5U,QAC/B,QCbDoO,oBAAS,WACpB,IAAQvN,EAAcqN,IAAdrN,UAER,OACI,cAAC,KAAD,CACIoU,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAInV,MAAO,MACjDoV,SAAU,SAAChN,EAAD,OAAWiN,EAAX,EAAWA,UAAX,OAA2BxU,EAAUwB,MAAM+F,GAAQiD,OAAM,SAAArL,GAAK,OACpEqV,EAAU,CAAErV,MAAO,kCAH3B,SAKK,gBAAGsV,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAclV,EAA/B,EAA+BA,OAA/B,OACG,eAAC,KAAD,CAAMmV,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACtF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,kBAAkB8D,MAAM,OAAOsC,UAAU,WACjE,cAAC6B,GAAD,CAAa1J,KAAK,QAAQ4K,YAAY,UACtC,cAAClB,GAAD,CAAa1J,KAAK,WAAW4K,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI7K,KAAK,QAAQ8K,OAAQ,kBACjB,cAAClD,GAAA,EAAD,CAAOzD,MAAO,CAAE4D,aAAc,IAAM9B,OAAK,EAACV,MAAM,MAAM9D,QAASlM,EAAOL,WAG9E,cAACmP,EAAA,EAAD,CAAQrK,QAASyQ,EAAcnG,UAAQ,EAAC7C,QAAQ,QAAQoJ,KAAK,SAAS9E,OAAK,a,mBClBhF,SAASgF,GAAT,GAA4C,IAAjBxV,EAAgB,EAAhBA,OACtC,OACI,cAACyV,GAAA,EAAD,CAAS9V,OAAK,EAAd,SACKK,GACG,cAACyV,GAAA,EAAQ/D,KAAT,UACK1R,EAAO4R,KAAI,SAAC8D,EAAUC,GAAX,OACV,cAACF,GAAA,EAAQrH,KAAT,CAAsBwH,MAAI,EAA1B,SAA4BF,GAATC,UCL1B5H,oBAAS,WACpB,IAAQvN,EAAcqN,IAAdrN,UAER,OACI,cAAC,KAAD,CACIoU,cAAe,CAAE1Q,YAAa,GAAI3B,SAAU,GAAIsS,MAAO,GAAIC,SAAU,GAAInV,MAAO,MAChFoV,SAAU,SAAChN,EAAD,OAAWiN,EAAX,EAAWA,UAAX,OAA2BxU,EAAU0B,SAAS6F,GAAQiD,OAAM,SAAArL,GAAK,OACvEqV,EAAU,CAAErV,cAChBkW,iBAAkBC,KAAW,CACzB5R,YAAa4R,OAAaC,WAC1BxT,SAAUuT,OAAaC,WACvBlB,MAAOiB,OAAaC,WAAWlB,QAC/BC,SAAUgB,OAAaC,aAR/B,SAWK,gBAAGd,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAclV,EAA/B,EAA+BA,OAAQgW,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACtF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,oBAAoB8D,MAAM,OAAOsC,UAAU,WACnE,cAAC6B,GAAD,CAAa1J,KAAK,cAAc4K,YAAY,iBAC5C,cAAClB,GAAD,CAAa1J,KAAK,WAAW4K,YAAY,aACzC,cAAClB,GAAD,CAAa1J,KAAK,QAAQ4K,YAAY,UACtC,cAAClB,GAAD,CAAa1J,KAAK,WAAW4K,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI7K,KAAK,QAAQ8K,OAAQ,kBACjB,cAACC,GAAD,CAAkBxV,OAAQA,EAAOL,WAEzC,cAACmP,EAAA,EAAD,CAAQuE,UAAW2C,IAAYC,GAASf,EACpCzQ,QAASyQ,EAAcnG,UAAQ,EAAC7C,QAAQ,WAAWoJ,KAAK,SAAS9E,OAAK,aC3B/EzC,gBAAS,WACpB,MAAkCF,IAA1BrN,EAAR,EAAQA,UAAW2J,EAAnB,EAAmBA,WACnB,OACI,cAACiI,GAAA,EAAD,CAASnE,UAAQ,EAACqE,UAAU,SAAS5C,UAAQ,EAACyF,UAAU,WAAxD,SACI,eAAChH,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOU,KAAK,UAAUjB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE4D,aAAc,MADnF,YAIChS,EAAU0V,WACP,qCACI,cAACpG,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAC/B,QAAQ,sBACjC,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcoB,KAAK,OAAO1B,UAAQ,EAAvD,kCAKJ,qCACI,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMtF,EAAW8B,UAAU,cAAC,GAAD,MAAgB0D,KAAK,OAAO1B,UAAQ,EAAhF,oBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMtF,EAAW8B,UAAU,cAAC,GAAD,MAAmB0D,KAAK,OAAO1B,UAAQ,EAAnF,uBAGA,cAACkI,GAAA,EAAD,CAASxE,YAAU,EAAC1D,UAAQ,EAA5B,gBACA,cAACa,EAAA,EAAD,CACArK,QAASjE,EAAUsJ,UACf6F,KAAK,OACL1B,UAAQ,EACR+B,MAAM,WACN9D,QAAQ,sBACRuD,QAASjP,EAAUsK,2B,UC/BhC,SAASsL,GAAT,GAA4E,IAAD,IAAhDnI,gBAAgD,aAA/B/B,eAA+B,MAArB,aAAqB,EACtF,OACI,cAACmK,GAAA,EAAD,CAAQpG,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAACiG,EAAA,EAAD,CAAQhI,QAASA,M,cCAd,SAASoK,GAAWlC,GAC/B,MAAsBC,aAASD,EAAM3J,MAArC,mBAAO6J,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY9U,MAAO4U,EAAKG,WAAaH,EAAK5U,MAA1C,UACI,gCAAQyU,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAK5U,MAClB,cAAC0S,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,MAAnB,SAA0BuE,EAAK5U,QAC/B,Q,cCRD,SAAS4W,GAAcnC,GAClC,MAA+BC,aAASD,EAAM3J,MAA9C,mBAAO6J,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAY9U,MAAO4U,EAAKG,WAAaH,EAAK5U,MAA1C,UACI,gCAAQyU,EAAMO,QACd,cAAC8B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASvC,EAAMuC,QACf5R,MAAOuP,EAAMvP,OAAS,KACtBoL,SAAU,SAACQ,EAAGiG,GAAJ,OAAUJ,EAAQK,SAASD,EAAE7R,QACvC+R,OAAQ,kBAAMN,EAAQO,YAAW,IACjC1B,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAK5U,MAClB,cAAC0S,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,MAAnB,SAA0BuE,EAAK5U,QAC/B,QC1BT,IAAMqX,GAAkB,CAC3B,CAAC1H,KAAM,SAAUvK,MAAO,UACxB,CAACuK,KAAM,UAAWvK,MAAO,WACzB,CAACuK,KAAM,OAAQvK,MAAO,QACtB,CAACuK,KAAM,OAAQvK,MAAO,QACtB,CAACuK,KAAM,QAASvK,MAAO,SACvB,CAACuK,KAAM,SAAUvK,MAAO,W,qBCDb,SAASkS,GAAY7C,GAChC,MAA+BC,aAASD,EAAM3J,MAA9C,mBAAO6J,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KACA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAY9U,MAAO4U,EAAKG,WAAaH,EAAK5U,MAA1C,UACI,cAAC,KAAD,uCACQ2U,GACAF,GAFR,IAGI8C,SAAW5C,EAAMvP,OAAS,IAAIsB,KAAKiO,EAAMvP,QAAW,KACpDoL,SAAU,SAAApL,GAAK,OAAIyR,EAAQK,SAAS9R,OAEvCwP,EAAKG,SAAWH,EAAK5U,MAClB,cAAC0S,GAAA,EAAD,CAAO3B,OAAK,EAACV,MAAM,MAAnB,SAA0BuE,EAAK5U,QAC/B,QCCDoO,oBAAS,WAEpB,IAAM7N,EAAUiX,eACR3N,EAAkBqE,IAAlBrE,cACAjD,EAC6BiD,EAD7BjD,eAAgBG,EACa8C,EADb9C,eACpBhB,EAAiC8D,EAAjC9D,aAAchB,EAAmB8E,EAAnB9E,eACVjD,EAAO2V,eAAP3V,GACR,EAAgC6R,mBAA6B,IAAI7P,GAAjE,mBAAO9B,EAAP,KAAiB0D,EAAjB,KAEMwQ,EAAmBC,KAAW,CAChCnS,MAAOmS,OAAaC,SAAS,kCAC7BlS,YAAaiS,OAAaC,SAAS,wCACnCnS,SAAUkS,OAAaC,WACvBjS,KAAMgS,OAAaC,SAAS,oBAAoBsB,WAChDrT,MAAO8R,OAAaC,WACpBhS,KAAM+R,OAAaC,aAoBvB,OAjBAtC,qBAAU,WACFhS,GAAIiE,EAAajE,GAAIV,MAAK,SAAAY,GAAQ,OAAI0D,EAAY,IAAI5B,EAAmB9B,SAC9E,CAACF,EAAIiE,IAeJhB,EAAuB,cAAC0R,GAAD,CAAkBlK,QAAQ,wBAGjD,eAACkG,GAAA,EAAD,CAASO,UAAQ,EAAjB,UACI,cAAC7C,EAAA,EAAD,CAAQ5D,QAAQ,mBAAmB6G,KAAG,EAAC/C,MAAM,SAC7C,cAAC,KAAD,CACI6F,iBAAkBA,EAClByB,oBAAkB,EAClB1C,cAAejT,EACfoT,SAAU,SAAAhN,GAAM,OAtB5B,SAA0BpG,GACtB,GAAKA,EAASF,GAOViF,EAAe/E,GAAUZ,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BwB,EAASF,YAP3D,CACd,IAAIgF,EAAW,2BACR9E,GADQ,IAEXF,GAAI8V,iBAERhR,EAAeE,GAAa1F,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BsG,EAAYhF,SAgBvD+V,CAAiBzP,IAJzC,SAKK,gBAAGkN,EAAH,EAAGA,aAAce,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAAce,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMd,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAa1J,KAAK,QAAQ4K,YAAY,UACtC,cAACiB,GAAD,CAAYmB,KAAM,EAAGpC,YAAY,cAAc5K,KAAK,gBACpD,cAAC8L,GAAD,CAAeI,QAASK,GAAiB3B,YAAY,WAAW5K,KAAK,aACrE,cAACwM,GAAD,CACIS,gBAAgB,OAChBjN,KAAK,OACLkN,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAAC/H,EAAA,EAAD,CAAQ5D,QAAQ,mBAAmB6G,KAAG,EAAC/C,MAAM,SAC7C,cAACmE,GAAD,CAAakB,YAAY,OAAO5K,KAAK,SACrC,cAAC0J,GAAD,CAAakB,YAAY,QAAQ5K,KAAK,UACtC,cAACqE,EAAA,EAAD,CACIuE,SAAU6B,IAAiBe,IAAUD,EACrCvR,QAASyQ,EACTtC,QAAQ,QACR7D,UAAQ,EACRuG,KAAK,SACLpJ,QAAQ,WACZ,cAAC4C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcqE,QAAQ,QAAQ0C,KAAK,SAASpJ,QAAQ,uB,oBCxElF6B,gBAAS,YAAsD,IAAtBvB,EAAqB,EAArBA,WAC5CJ,EAAiByB,IAAjBzB,aAWR,OATAqH,qBAAU,WAIN,OAHIjH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaoB,mBAElB,CAACpB,EAAcI,IAGd,qCACI,cAAC4F,GAAA,EAAD,CACIE,UAAU,SACVvC,SAAS,MACT9B,UAAQ,EACR+B,MAAM,OACNpB,MAAO,CAAEkJ,OAAQ,QALrB,SAOI,cAAChI,EAAA,EAAD,sCAEJ,eAACsC,GAAA,EAAD,CAASrC,UAAQ,EAAC4C,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAAChN,EAAD,OAAWgQ,EAAX,EAAWA,UAAX,OAA2B3L,EAAaqB,WAAW1F,GAAQhH,MAAK,kBAAMgX,QAChFnD,cAAe,CAAE5T,KAAM,IACvB6U,iBAAkBC,KAAW,CACzB9U,KAAM8U,OAAaC,aAJ3B,SAOK,gBAAGb,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASf,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAO1K,KAAK,OAAZ,SACK,SAAC2J,GAAD,OACG,sBAAKxF,MAAO,CAAEI,SAAU,YAAxB,UACI,cAACkF,EAAA,EAAD,CAAQjE,OAAQiF,IAChB,kDACIG,YAAY,mEACZoC,KAAM,GACFrD,EAAME,OAHd,IAII0D,WAAY,SAAArH,GACM,UAAVA,EAAEtQ,KAAmBsQ,EAAEsH,UAGb,UAAVtH,EAAEtQ,KAAoBsQ,EAAEsH,WACxBtH,EAAEC,iBACFoF,GAAWf,oBAU/C,cAACiD,GAAA,EAAQ3F,MAAT,UACKnG,EAAaC,SAASuF,KAAI,SAAAzE,GAAO,OAC9B,eAAC+K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBzJ,IAAKvB,EAAQhJ,OAAS,qBACtC,eAAC+T,GAAA,EAAQ5H,QAAT,WACI,cAAC4H,GAAA,EAAQE,OAAT,CAAgB/J,GAAIkB,IAAMhB,GAAE,oBAAepB,EAAQ5K,UAAnD,SACK4K,EAAQjJ,cAEb,cAACgU,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBnL,EAAQC,WAAlC,YAEJ,cAAC8K,GAAA,EAAQK,KAAT,CAAc3J,MAAO,CAAE4J,WAAY,YAAnC,SAAmDrL,EAAQnM,YATrDmM,EAAQ1L,kBC/DxCgX,GAAqB,CACvB3R,OAAQ,mBAGN4R,GAAyB,CAC3B1J,SAAU,WACV2J,OAAQ,KACRC,KAAM,KACNhJ,MAAO,OACPiJ,OAAQ,OACR7I,MAAO,SAOIjC,gBAAS,YAAsD,IAAD,IAAnBpM,EAAmB,EAAnBA,SACtD,EAA+EkM,IAAvErE,cAAiB3C,EAAzB,EAAyBA,iBAAkBpC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBACpD,OACI,eAACoL,GAAA,EAAQG,MAAT,WACI,eAACH,GAAA,EAAD,CAAS1B,OAAK,EAACX,SAAS,MAAMnB,MAAO,CAAEkK,QAAS,KAAhD,UACKnX,EAASsF,aACN,cAACoL,GAAA,EAAD,CAAOzD,MAAO,CAAEI,SAAU,WAAY+J,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAAMC,QAAM,EAACjJ,MAAM,MAAM9D,QAAQ,cAEzG,cAAC+C,EAAA,EAAD,CAAOP,IAAG,iCAA4B/M,EAASiC,SAArC,QAAqD4M,OAAK,EAAC5B,MAAO6J,KAC5E,cAACrG,GAAA,EAAD,CAASxD,MAAO8J,GAAwBhI,OAAK,EAA7C,SACI,cAACtC,GAAA,EAAKmE,MAAN,UACI,cAACnE,GAAA,EAAD,UACI,eAACA,GAAA,EAAKkC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACLzD,QAASvK,EAASgC,MAClBiL,MAAO,CAAEoB,MAAO,WAEpB,4BAAIzH,YAAO5G,EAASmC,KAAO,iBAC3B,2CACc,mCAAQ,cAAC,IAAD,CAAMyK,GAAE,8BAAe5M,EAASuE,YAAxB,aAAe,EAAe3D,UAAtC,mBAAoDZ,EAASuE,YAA7D,aAAoD,EAAehC,cAA3E,sBAOlC,cAACkO,GAAA,EAAD,CAASO,UAAQ,EAAC5C,SAAS,SAA3B,SACKpO,EAASqE,OACN,qCACI,cAAC8I,EAAA,EAAD,CACIkB,MAAOrO,EAASsF,YAAc,QAAU,MACxCyJ,OAAK,EACLxE,QAASvK,EAASsF,YAAc,uBAAyB,kBACzDwI,QAASzI,EACTvC,QAASA,IAEb,cAACqK,EAAA,EAAD,CAAQT,GAAIkB,IACR8D,SAAU1R,EAASsF,YACnBsH,GAAE,kBAAa5M,EAASF,IACxBuO,MAAM,SACN4C,QAAQ,QAJZ,6BASJjR,EAASkE,QACT,cAACiJ,EAAA,EAAD,CAAQrK,QAASA,EAASgL,QAAS5I,EAAnC,+BAEA,cAACiI,EAAA,EAAD,CAAQuE,SAAU1R,EAASsF,YACvBxC,QAASA,EAASgL,QAAS5I,EAAkBmJ,MAAM,OADvD,mCCjELjC,gBAAS,YAAkD,IAAnBpM,EAAkB,EAAlBA,SACnD,OACI,eAACyQ,GAAA,EAAQG,MAAT,WACI,cAACH,GAAA,EAAD,CAASrC,SAAS,MAAlB,SACI,eAAC2D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAM3B,KAAK,QAAQK,MAAM,OAAOvF,KAAK,WAEzC,cAACiJ,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,4BAAIjO,EAASkC,qBAIzB,cAACuO,GAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,eAAC2D,EAAA,EAAD,CAAMwF,cAAc,SAApB,UACI,cAACxF,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAM7G,KAAK,WAAWkF,KAAK,QAAQK,MAAM,WAE7C,cAAC0D,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACR,+BACGrH,YAAO5G,EAASmC,KAAO,gCAK1B,cAACsO,GAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,eAAC2D,EAAA,EAAD,CAAMwF,cAAc,SAApB,UACI,cAACxF,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,SACI,cAAC0B,GAAA,EAAD,CAAM7G,KAAK,SAASkF,KAAK,QAAQK,MAAM,WAE3C,cAAC0D,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,iCAAOjO,EAASqC,MAAhB,KAAyBrC,EAASoC,qBChC3CgK,gBAAS,YAA4E,IAAD,IAAxCpM,SAAYmE,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KAC9E,OAAKJ,EAED,qCACI,eAACsM,GAAA,EAAD,CACIE,UAAU,SACV1D,MAAO,CAAEkJ,OAAQ,QACjB/H,SAAS,MACT0C,WAAS,EACTxE,UAAQ,EACR+B,MAAM,OANV,UAQKlK,EAAUmL,OARf,IAQ6C,IAArBnL,EAAUmL,OAAe,SAAW,SAR5D,YAUA,cAACmB,GAAA,EAAD,CAASrC,UAAQ,EAAjB,SACI,cAAC2B,GAAA,EAAD,CAAMyH,SAAO,EAACC,SAAO,EAArB,SACKtT,EAAU8L,KAAI,SAAApL,GAAQ,OACnB,eAAC4H,GAAA,EAAD,CAAMQ,MAAO,CAAEI,SAAU,YAAzB,UACKxI,EAASjE,YAAT,OAAsB2D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM3D,WACzB,cAAC8P,GAAA,EAAD,CACIzD,MAAO,CAAEI,SAAU,YACnBgB,MAAM,SACNiJ,OAAO,QAHX,kBAOJ,cAAChK,EAAA,EAAD,CAAOU,KAAK,OAAOjB,IAAKlI,EAASrC,OAAS,qBAC1C,eAACiK,GAAA,EAAKkC,QAAN,CAAc4I,cAAc,SAA5B,UACI,cAAC9K,GAAA,EAAK0B,OAAN,CAAazB,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe/H,EAASjE,UAAhC,SAA6CiE,EAAStC,gBAEzDsC,EAASY,WACV,cAACgH,GAAA,EAAKiL,MAAN,CAAYzK,MAAO,CAAEoB,MAAO,UAA5B,4BAfoCxJ,EAASjE,oBAhBlD,QCCZwL,gBAAS,WAEpB,IAAQvE,EAAkBqE,IAAlBrE,cACkB7H,EAAkE6H,EAApFjF,iBAA4BmB,EAAwD8D,EAAxD9D,aAAchB,EAA0C8E,EAA1C9E,eAAgBwC,EAA0BsC,EAA1BtC,sBAC1DzF,EAAO2V,eAAP3V,GAOR,OALAgS,qBAAU,WAER,OADIhS,GAAIiE,EAAajE,GACd,kBAAMyF,OACZ,CAACzF,EAAIiE,EAAcwB,IAElBxC,IAAmB/C,EAAiB,cAACyU,GAAD,IAGpC,eAAC1C,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBjO,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsB6K,WAAY7K,EAASF,QAE/C,cAACiS,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,SACI,cAAC0J,GAAD,CAAyB3X,SAAUA,YC3BpC,SAAS4X,KACpB,IACA,EAA4BjG,mBAAS,MAArC,mBAAOtT,EAAP,KAAegV,EAAf,KA0BA,OACI,qCACI,cAAClF,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,yBACxB,cAACkG,GAAA,EAAD,UACI,eAACtD,EAAA,EAAOyD,MAAR,CAAciH,OAAO,IAArB,UACI,cAAC1K,EAAA,EAAD,CAAQW,QA7BxB,WACI/Q,IAAMoC,IAAI2Y,uBAA6BzO,OAAM,SAAA0K,GAAG,OAAIlQ,QAAQC,IAAIiQ,EAAInW,cA4BvB2M,QAAQ,YAAYwE,OAAK,EAACgJ,SAAO,IAClE,cAAC5K,EAAA,EAAD,CAAQW,QA1BxB,WACI/Q,IAAMoC,IAAI2Y,yBAA+BzO,OAAM,SAAA0K,GAAG,OAAIlQ,QAAQC,IAAIiQ,EAAInW,cAyBvB2M,QAAQ,cAAcwE,OAAK,EAACgJ,SAAO,IACtE,cAAC5K,EAAA,EAAD,CAAQW,QAXxB,WACI/Q,IAAMuC,KAAKwY,iBAAwB,IAAIzO,OAAM,SAAA0K,GAAG,OAAIV,EAAUU,OAUVxJ,QAAQ,mBAAmBwE,OAAK,EAACgJ,SAAO,IAChF,cAAC5K,EAAA,EAAD,CAAQW,QAxBxB,WACI/Q,IAAMoC,IAAI2Y,0BAAgCzO,OAAM,SAAA0K,GAAG,OAAIlQ,QAAQC,IAAIiQ,EAAInW,cAuBvB2M,QAAQ,eAAewE,OAAK,EAACgJ,SAAO,IACxE,cAAC5K,EAAA,EAAD,CAAQW,QArBxB,WACI/Q,IAAMoC,IAAI2Y,0BAAgCzO,OAAM,SAAA0K,GAAG,OAAIlQ,QAAQC,IAAIiQ,EAAInW,cAoBtB2M,QAAQ,eAAewE,OAAK,EAACgJ,SAAO,IACzE,cAAC5K,EAAA,EAAD,CAAQW,QAlBxB,WACI/Q,IAAMoC,IAAI2Y,2BAAiCzO,OAAM,SAAA0K,GAAG,OAAIlQ,QAAQC,IAAIiQ,OAiBxBxJ,QAAQ,WAAWwE,OAAK,EAACgJ,SAAO,SAGvE1Z,GACG,cAACwV,GAAD,CAAkBxV,OAAQA,OC3C3B,SAAS2Z,KACpB,OACI,eAACvH,GAAA,EAAD,CAASiD,aAAW,EAApB,UACI,eAACvF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAAC8B,GAAA,EAAD,CAAM7G,KAAK,WADf,6DAIA,cAAC2H,GAAA,EAAQwH,OAAT,UACI,cAAC9K,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcmL,SAAO,EAA1C,4CCPD3L,oBAAU,WAAwB,IAAD,IACrC3O,EAAeyO,IAAfzO,YACP,OACI,eAAC+O,EAAA,EAAD,WACI,cAAC2B,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,iBACxB,cAAC4D,EAAA,EAAD,CAAQiD,KAAG,EAAC1E,GAAG,KAAK2B,MAAM,MAAM9D,QAAO,UAAE9M,EAAYO,aAAd,aAAE,EAAmBka,WAC3D,UAAAza,EAAYO,aAAZ,eAAmB6B,UAChB,eAAC4Q,GAAA,EAAD,WACI,cAACtC,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAAQ,cAAc8D,MAAM,SAC5C,sBAAMpB,MAAO,CAACiB,UAAW,QAAzB,SAAmCzQ,EAAYO,MAAM6B,mB,UCT1DuM,gBAAS,WACpB,IAAO5D,EAAc0D,IAAd1D,WAEP,OACI,cAAC2P,GAAA,EAAD,CAAO9N,KAAM7B,EAAW4B,MAAMC,KAAM+N,QAAS5P,EAAWC,WAAYuF,KAAK,OAAzE,SACI,cAACmK,GAAA,EAAMxJ,QAAP,UACKnG,EAAW4B,MAAM/K,Y,UCDnB+M,gBAAS,YAAgD,IAAtBiM,EAAqB,EAArBA,YAC9C,EAAiDnM,IAA1C1B,aAAenJ,EAAtB,EAAsBA,QAASD,EAA/B,EAA+BA,cAC/B,OACI,cAAC,KAAD,CACI6R,cAAe,CAAC1Q,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAakN,IAAG,OAClEpO,QADkE,IAClEA,OADkE,EAClEA,EAASoO,KACG2D,SAAU,SAAAhN,GACNhF,EAAcgF,GAAQhH,MAAK,WACvBiZ,GAAY,OAGpBnE,iBAAkBC,KAAW,CACzB5R,YAAa4R,OAAaC,aATlC,SAYK,gBAAEb,EAAF,EAAEA,aAAcc,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAzB,OACG,eAAC,KAAD,CAAMd,UAAU,UAAhB,UACI,cAAChB,GAAD,CAAakB,YAAY,eAC7C5K,KAAK,gBACe,cAAC6L,GAAD,CAAYmB,KAAM,EAAGpC,YAAY,eACrD5K,KAAK,QACe,cAACqE,EAAA,EAAD,CACIC,UAAQ,EACRuG,KAAK,SACL7Q,QAASyQ,EACThJ,QAAQ,iBACR0G,QAAQ,QACRS,UAAW2C,IAAYC,aC/BhClI,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aACA8N,EAA2B9N,EAA3B8N,cAAejX,EAAYmJ,EAAZnJ,QACvB,EAAgCsQ,oBAAS,GAAzC,mBAAO9O,EAAP,KAAiBwV,EAAjB,KACA,OACI,cAACE,GAAA,EAAIC,KAAL,UACI,eAACzG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAM,KAAnB,UACI,cAACE,EAAA,EAAD,CAAQ8C,QAAQ,OAAOpD,KAAK,OAAOtD,QAAO,uBAAWlJ,QAAX,IAAWA,OAAX,EAAWA,EAASkB,eAC7D+V,GACG,cAACnL,EAAA,EAAD,CACI8D,QAAQ,QACRlC,OAAK,EACLxE,QAAS1H,EAAW,SAAW,eAC/BiL,QAAS,kBAAMuK,GAAaxV,SAIxC,cAACkP,EAAA,EAAKC,OAAN,CAAa/D,MAAM,KAAnB,SACKpL,EAAW,cAAC,GAAD,CAAiBwV,YAAaA,IACtC,uBAAMpL,MAAO,CAAE4J,WAAY,YAA3B,qBAA2CxV,QAA3C,IAA2CA,OAA3C,EAA2CA,EAASoO,IAApD,iBCnBlBgJ,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAEja,IAAK,WAC1C,CAAEga,SAAU,cAAeC,KAAM,CAAEja,IAAK,SACxC,CAAEga,SAAU,UAAWC,KAAM,CAAEja,IAAK,aAEzB0N,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aAEJxC,EAIAwC,EAJAxC,mBACA3G,EAGAmJ,EAHAnJ,QACA+F,EAEAoD,EAFApD,kBACAD,EACAqD,EADArD,eAEJ2K,qBAAU,WACN9J,EAAmB3G,EAAST,YAC7B,CAACoH,EAAoB3G,IAKxB,OACI,cAACkX,GAAA,EAAIC,KAAL,CAAU1V,QAASsE,EAAnB,SACI,eAAC2K,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQ8C,QAAQ,OAAOpD,KAAK,WACxBtD,QAAS,iBAEjB,eAACwH,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,UACI,cAACsK,GAAA,EAAD,CACIE,MAAOA,GACPG,KAAM,CAAE9H,WAAW,EAAMpD,UAAU,GACnCmL,YAAa,SAAC7J,EAAGvS,GAAJ,OAfT,SAACuS,EAAmBvS,GACxCuL,EAAmB3G,EAAST,SAAU6X,GAAMhc,EAAKqc,aACrCH,KAAKja,KAayBqa,CAAgB/J,EAAGvS,MAEjD,uBACA,cAAC0S,GAAA,EAAKyB,MAAN,CAAYoI,YAAa,EAAzB,SACK7R,EAAe8I,KAAI,SAACjQ,GAAD,OAChB,eAACmP,GAAA,EAAD,CACIzC,GAAIkB,IACJhB,GAAE,sBAAiB5M,EAASF,IAFhC,UAKI,cAACwN,EAAA,EAAD,CACIP,IAAG,iCAA4B/M,EAASiC,SAArC,QACHgL,MAAO,CACHsE,UAAW,IAAK0H,UACZ,WAGZ,eAAC9J,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,CACIwC,UAAU,SADd,SACwB3Q,EAASgC,QACjC,eAACmN,GAAA,EAAK+J,KAAN,CAAWvI,UAAU,SAArB,UACI,8BAAM/J,YAAO,IAAIlC,KAAK1E,EAASmC,MAC3B,YACJ,8BAAMyE,YAAO,IAAIlC,KAAK1E,EAASmC,MAC3B,oBAhBPnC,EAASF,oBCzC/BsM,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aACAnJ,EAAsDmJ,EAAtDnJ,QAAS2F,EAA6CwD,EAA7CxD,WAAYC,EAAiCuD,EAAjCvD,kBAAmBC,EAAcsD,EAAdtD,UAEhD,OACI,cAACqR,GAAA,EAAIC,KAAL,CAAU1V,QAASmE,EAAnB,SACI,eAAC8K,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CACI8C,QAAQ,OACRpD,KAAK,OACLtD,QAAuB,IAAdrD,EAAA,kCAAsC7F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,qBAGjB,cAACwP,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,cAACkB,GAAA,EAAKyB,MAAN,CAAYoI,YAAa,EAAzB,SACKhS,EAAWiJ,KAAI,SAAA5O,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yB,iBCdvC,SAASuY,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,WACtD,OACI,cAAC,KAAD,CACItM,IAAKqM,EACLnM,MAAO,CAAEiK,OAAQ,IAAKjJ,MAAO,QAC7BqL,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCZlC,SAASC,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACpCC,EAAW,CACb9D,OAAQ,kBACRtG,YAAa,OACbqK,aAAc,MACdC,WAAY,OACZxJ,UAAW,SACXuG,OAAQ,KAONkD,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAcrK,KAAI,SAACnP,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1D0Y,QAASe,IAAIC,gBAAgB1Z,WAElC,CAACkZ,IACJ,EAAsDS,aAAY,CAAEL,WAA5DM,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyBzN,MAAO2N,EAAY,2BAAQX,GAZvC,CACbpK,YAAa,UAWiEoK,EAA9E,UACI,qCAAWU,MACX,cAAChL,GAAA,EAAD,CAAM7G,KAAK,SAASkF,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ5D,QAAQ,wBCvBb,SAASsQ,GAAT,GAA2D,IAA/B/X,EAA8B,EAA9BA,QAASjC,EAAqB,EAArBA,YAChD,EAA0B8Q,mBAAc,IAAxC,mBAAOmJ,EAAP,KAAcd,EAAd,KACA,EAA8BrI,qBAA9B,mBAAOmI,EAAP,KAAgBT,EAAhB,KAcA,OANAvH,qBAAU,WACN,OAAO,WACHgJ,EAAMxX,SAAQ,SAACxC,GAAD,OAAeyZ,IAAIQ,gBAAgBja,EAAK0Y,eAE5D,CAACsB,IAGC,eAAC/I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQiD,KAAG,EAAC/C,MAAM,OAAO9D,QAAQ,uBACjC,cAACwP,GAAD,CAAqBC,SAAUA,OAEnC,cAACjI,EAAA,EAAKC,OAAN,CAAa/D,MAAO,IACpB,eAAC8D,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQiD,KAAG,EAAC/C,MAAM,OAAO9D,QAAQ,0BAChCuQ,GAASA,EAAMxL,OAAS,GACrB,cAAC6J,GAAD,CAAoBE,WAAYA,EAAYD,aAAc0B,EAAM,GAAGtB,aAG3E,cAACzH,EAAA,EAAKC,OAAN,CAAa/D,MAAO,IACpB,eAAC8D,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQiD,KAAG,EAAC/C,MAAM,OAAO9D,QAAQ,8BAChCuQ,GAASA,EAAMxL,OAAS,GACrB,qCACI,qBAAKkE,UAAU,cAAcvG,MAAO,CAAEsE,UAAW,IAAKyJ,SAAU,YAChE,eAAC7N,EAAA,EAAOyD,MAAR,CAAciH,OAAQ,EAAtB,UACI,cAAC1K,EAAA,EAAD,CAAQrK,QAASA,EAASgL,QAhClD,WACQgM,GACAA,EAAQmB,mBAAmBC,QAAO,SAAAC,GAAI,OAAIta,EAAYsa,OA8BK/N,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQuE,SAAU5O,EAASgL,QAAS,kBAAMkM,EAAS,KAAKnM,KAAK,sBCpC1EzB,oBAAS,YAA4C,IAAD,EAAlB/K,EAAkB,EAAlBA,QAC7C,EAAwG6K,IAAhG1B,aAAgB8N,EAAxB,EAAwBA,cAAezX,EAAvC,EAAuCA,YAAakG,EAApD,EAAoDA,UAAWjE,EAA/D,EAA+DA,QAAS5B,EAAxE,EAAwEA,aAAcC,EAAtF,EAAsFA,YACtF,EAAwCwQ,oBAAS,GAAjD,mBAAOyJ,EAAP,KAAqBC,EAArB,KACA,EAA4B1J,mBAAS,IAArC,mBAAO2J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAChD,GAAA,EAAIC,KAAL,UACI,eAACzG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQ8C,QAAQ,OAAOpD,KAAK,QAAQtD,QAAQ,WAC3C+N,GACG,cAACnL,EAAA,EAAD,CAAQ8D,QAAQ,QAAQlC,OAAK,EACzBxE,QAAS6Q,EAAe,SAAW,YACnCtN,QAAS,kBAAMuN,GAAiBD,SAI5C,cAACrJ,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACKmN,EACG,cAACP,GAAD,CAAmBha,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAM1B,MAAK,kBAAMic,GAAgB,OA2BsBvY,QAASiE,IAE5D,cAACoI,GAAA,EAAKyB,MAAN,CAAYoI,YAAa,EAAzB,mBACK3X,EAAQmG,cADb,aACK,EAAgByI,KAAI,SAAA1I,GAAK,OACtB,eAAC4H,GAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAOP,IAAKxF,EAAMrI,MACjBoZ,GACG,eAACnL,EAAA,EAAOyD,MAAR,CAAc/B,OAAK,EAACgJ,OAAQ,EAA5B,UACI,cAAC1K,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,QACN9D,QAAQ,OACRzB,KAAM,OAASvB,EAAMzH,GACrB4R,SAAUnK,EAAME,OAChB3E,QAASwY,IAAW,OAAS/T,EAAMzH,IAAMgD,EACzCgL,QAAS,SAAAkB,GAAC,OAvCtD,SAA4BzH,EAAcyH,GACtCuM,EAAUvM,EAAEwM,cAAc1S,MAC1B5H,EAAaqG,GAqCyCkU,CAAmBlU,EAAOyH,MAE5C,cAAC7B,EAAA,EAAD,CACI4B,OAAK,EACLV,MAAM,MACNR,KAAK,QACL/K,QAASwY,IAAW/T,EAAMzH,IAAMgD,EAChCgL,QAAS,SAAAkB,GAAC,OAzCtD,SAA2BzH,EAAcyH,GACrCuM,EAAUvM,EAAEwM,cAAc1S,MAC1B3H,EAAYoG,GAuC0CmU,CAAkBnU,EAAOyH,IACvC0C,SAAUnK,EAAME,OAChBqB,KAAMvB,EAAMzH,UApBjByH,EAAMzH,mBCrClCsM,gBAAS,YAA6C,IAAnB/K,EAAkB,EAAlBA,QACvCmJ,EAAgB0B,IAAhB1B,aACDiO,EAAQ,CACV,CAACC,SAAU,QAAS9E,OAAQ,kBAAM,cAAC,GAAD,MAClC,CAAC8E,SAAU,SAAU9E,OAAQ,kBAAM,cAAC,GAAD,CAAevS,QAASA,MAC3D,CAACqX,SAAU,SAAU9E,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAAC8E,SAAU,YAAa9E,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAAC8E,SAAU,YAAa9E,OAAQ,kBAAM,cAAC,GAAD,OAE1C,OACI,cAAC2E,GAAA,EAAD,CACIK,KAAM,CAAE/J,OAAO,EAAMd,UAAU,GAC/B4N,aAAa,QACblD,MAAOA,EACPI,YAAa,SAAC7J,EAAGvS,GAAJ,OAAa+N,EAAanD,aAAa5K,EAAKqc,mB,UChBtD1M,gBAAS,YAA4C,IAAnB/K,EAAkB,EAAlBA,QAC7C,OACI,cAACoP,GAAA,EAAD,UACI,eAACsB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACI,cAACxB,GAAA,EAAKmE,MAAN,UACI,eAACnE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQjB,IAAK1L,EAAQmB,OAAS,qBACtD,cAACiK,GAAA,EAAKkC,QAAN,CAAc4I,cAAc,SAA5B,SACI,cAACpJ,EAAA,EAAD,CAAQzB,GAAG,KAAKnC,QAASlJ,EAAQkB,uBAKjD,eAACwP,EAAA,EAAKC,OAAN,CAAa/D,MAAO,EAApB,UACI,eAAC2N,GAAA,EAAUhL,MAAX,CAAiBiH,OAAQ,EAAzB,UACI,cAAC+D,GAAA,EAAD,CAAW5I,MAAM,YAAY5P,MAAO/B,EAAQqE,iBAC5C,cAACkW,GAAA,EAAD,CAAW5I,MAAM,YAAY5P,MAAO/B,EAAQyG,oBAEhD,cAAC0M,GAAA,EAAD,IACA,cAAC,GAAD,CAAcnT,QAASA,eCpB5B+K,gBAAS,WACpB,IAAQxL,EAAa6U,eAAb7U,SACA4J,EAAiB0B,IAAjB1B,aACA1D,EAAuD0D,EAAvD1D,eAAgBQ,EAAuCkD,EAAvClD,YAAajG,EAA0BmJ,EAA1BnJ,QAASgG,EAAiBmD,EAAjBnD,aAU9C,OARAyK,qBAAU,WAEN,OADAxK,EAAY1G,GACL,WACLyG,EAAa,MAGhB,CAACC,EAAa1G,EAAUyG,IAEvBP,EAAuB,cAAC2N,GAAD,CAAkBlK,QAAQ,uBAGjD,cAACwH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa/D,MAAO,GAApB,SACK5M,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCvBlC,SAASwa,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,mBACtDzH,EAAerI,IAA3BrN,UAAY0V,WACnB,OACI,cAAC,KAAD,2BACQyH,GADR,IAEIpI,OAAQ,SAACnB,GAAD,OAAW8B,EAAa,cAACuH,EAAD,eAAerJ,IAAY,cAAC,KAAD,CAAU7F,GAAG,UCmDrER,oBA5Cf,WAEE,IAAM6P,EAAWC,eACjB,EAAiChQ,IAA1BzO,EAAP,EAAOA,YAAaoB,EAApB,EAAoBA,UAUpB,OARAiT,qBAAU,WACJrU,EAAYF,MACdsB,EAAUgK,UAAUsT,SAAQ,kBAAM1e,EAAYyM,kBAE9CrL,EAAUkK,yBAAyB3J,MAAK,kBAAM3B,EAAYyM,oBAE3D,CAACzM,EAAaoB,IAEZpB,EAAYwM,UAGf,qCACE,cAAC,IAAD,CAAgBoD,SAAS,eAAe+O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOvP,OAAK,EAACwP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACNzI,OAAQ,kBACN,qCACE,cAAC2I,EAAD,IACA,cAAC/P,EAAA,EAAD,CAAWS,MAAO,CAAEiB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAAC2N,GAAD,CAAchP,OAAK,EAACwP,KAAK,cAAcN,UAAWS,KAClD,cAACX,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWU,KAChD,cAACZ,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWW,IAAnET,EAASvd,KAC5B,cAACmd,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWY,KACpD,cAACd,GAAD,CAAcQ,KAAK,UAAUN,UAAWnE,KACxC,cAAC,KAAD,CAAOyE,KAAK,gBAAgBN,UAAWa,KACvC,cAAC,KAAD,CAAOb,UAAW/D,mBApBG,cAACvD,GAAD,CAAkBlK,QAAQ,sBClBhDsS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3d,MAAK,YAAkD,IAA/C4d,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAapB,eAAboB,SAMR,OAJAxL,qBAAU,WACRpJ,OAAO6U,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAM/e,GAAUif,eAEvBC,IAAS7J,OACL,cAAC5H,EAAa0R,SAAd,CAAuBta,MAAO5F,EAA9B,SACE,eAAC,KAAD,CAAQe,QAASA,GAAjB,UACE,cAAC8e,GAAD,IACA,cAAC,GAAD,SAGNM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.e4de8112.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { ServerError } from \"../models/serverError\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\ninterface dataResponseType{\r\n    errors: any[]\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config: any) => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    const dataR = data as dataResponseType;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof dataR === 'string') {\r\n                toast.error(dataR);\r\n            }\r\n            if (config.method === 'get' && dataR.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (dataR.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in dataR.errors){\r\n                    if(dataR.errors[key]){\r\n                        modalStateErrors.push(dataR.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(dataR);\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')){\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            const dataS = data as ServerError;\r\n            store.commonStore.setServerError(dataS);\r\n            history.push('/server-error')\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => request.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current:  () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => request.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => request.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => request.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string  = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../API/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n  activityRegistry = new Map<string, Activity>();\r\n  selectedActivity: Activity | undefined = undefined;\r\n  editMode = false;\r\n  loading = false;\r\n  loadingInitial = false;\r\n  pagination: Pagination | null = null;\r\n  pagingParams = new PagingParams();\r\n  predicate = new Map().set('all', true);\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.pagingParams = new PagingParams();\r\n        this.activityRegistry.clear();\r\n        this.loadActivities();\r\n      }\r\n      \r\n    )\r\n  }\r\n\r\n  setPagingParams = (pagingParams: PagingParams) => {\r\n    this.pagingParams = pagingParams;\r\n  }\r\n\r\n  setPredicate = (predicate: string, value: string | Date) => {\r\n    const resetPreciate = () => {\r\n      this.predicate.forEach((value, key) => {\r\n        if (key !== 'startDate') this.predicate.delete(key);\r\n      })\r\n    }\r\n    \r\n    switch (predicate) {\r\n      case 'all':\r\n        resetPreciate();\r\n        this.predicate.set('all', true);\r\n        break;\r\n      case 'isGoing':\r\n        resetPreciate();\r\n        this.predicate.set('isGoing', true);\r\n        break;\r\n      case 'isHost':\r\n        resetPreciate();\r\n        this.predicate.set('isHost', true);\r\n        break;\r\n      case 'startDate':\r\n        this.predicate.delete('startDate');\r\n        this.predicate.set('startDate', value);\r\n    }\r\n  }\r\n  \r\n\r\n  get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n    params.append('pageSize', this.pagingParams.pageSize.toString());\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, (value as Date).toISOString());\r\n      } else {\r\n        params.append(key, value);\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n  \r\n\r\n  get activitiesbyDate() {\r\n    return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n      a.date!.getTime() - b.date!.getTime());\r\n  }\r\n\r\n  get groupedActivities() {\r\n    return Object.entries(\r\n      this.activitiesbyDate.reduce((activities, activity) => {\r\n        const date = format(activity.date!, 'dd MMM yyyy');\r\n        activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n        return activities;\r\n      }, {} as { [key: string]: Activity[] })\r\n    )\r\n  }\r\n\r\n  loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    try {\r\n      const result = await agent.Activities.list(this.axiosParams);\r\n      result.data.forEach(activity => {\r\n        this.setActivity(activity);\r\n      })\r\n      this.setPagination(result.pagination);\r\n      this.setLoadingInitial(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setLoadingInitial(false);\r\n    }\r\n  }\r\n\r\n  setPagination = (pagination: Pagination) => {\r\n    this.pagination = pagination;\r\n  }\r\n\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.selectedActivity = activity;\r\n      return activity;\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        this.setActivity(activity);\r\n        runInAction(() => {\r\n          this.selectedActivity = activity;\r\n        })\r\n        this.setLoadingInitial(false);\r\n        return activity;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.setLoadingInitial(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setActivity = (activity: Activity) => {\r\n    const user = store.userStore.user;\r\n    if (user) {\r\n      activity.isGoing = activity.attendees!.some(\r\n        a => a.username === user.username\r\n      )\r\n      activity.isHost = activity.hostUsername === user.username;\r\n      activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n    }\r\n    activity.date = new Date(activity.date!);\r\n    this.activityRegistry.set(activity.id, activity);\r\n  }\r\n\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  }\r\n\r\n  setLoadingInitial = (state: boolean) => {\r\n    this.loadingInitial = state;\r\n  }\r\n\r\n  createActivity = async (activity: ActivityFormValues) => {\r\n    const user = store.userStore.user;\r\n    const attendee = new Profile(user!);\r\n    try {\r\n      await agent.Activities.create(activity);\r\n      const newActivity = new Activity(activity);\r\n      newActivity.hostUsername = user!.username;\r\n      newActivity.attendees = [attendee];\r\n      this.setActivity(newActivity);\r\n      runInAction(() => {\r\n        this.selectedActivity = newActivity;\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  updateActivity = async (activity: ActivityFormValues) => {\r\n    try {\r\n      await agent.Activities.update(activity);\r\n      runInAction(() => {\r\n        if (activity.id) {\r\n          let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n          this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n          this.selectedActivity = updatedActivity as Activity;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  deleteActivity = async (id: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id);\r\n        this.loading = false;\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  updateAttendance = async () => {\r\n    const user = store.userStore.user;\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id);\r\n      runInAction(() => {\r\n        if (this.selectedActivity?.isGoing) {\r\n          this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n          this.selectedActivity.isGoing = false;\r\n        } else {\r\n          const attende = new Profile(user!);\r\n          this.selectedActivity?.attendees?.push(attende);\r\n          this.selectedActivity!.isGoing = true;\r\n        }\r\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      runInAction(() => this.loading = false)\r\n    }\r\n  }\r\n\r\n  cancelActivitytoggle = async () => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id);\r\n      runInAction(() => {\r\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      runInAction(() => this.loading = false);\r\n    }\r\n  }\r\n\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined;\r\n  }\r\n\r\n  updateAttendeeFollowing = (username: string) => {\r\n    this.activityRegistry.forEach(activity => {\r\n      activity.attendees.forEach(attendee => {\r\n        if (attendee.username === username) {\r\n          attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n          attendee.following = !attendee.following;\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../API/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            }\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            }\r\n            )\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            }\r\n            )\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            }\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            }\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../API/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            console.log(\"userStore register\");\r\n            console.log(\"creds\");\r\n            console.log(creds);\r\n            const user = await agent.Account.register(creds);\r\n            console.log(\"user\");\r\n            console.log(user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n              if (token) {\r\n                  window.localStorage.setItem('jwt', token)\r\n              } else {\r\n                  window.localStorage.removeItem('jwt')\r\n              }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n    \r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n      this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createhubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach( comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z')\r\n                    })\r\n                    this.comments = comments;\r\n                })\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment); \r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n      this.comments = [];\r\n      this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n      values.activityId = store.activityStore.selectedActivity?.id;\r\n      try {\r\n          await this.hubConnection?.invoke('SendComment', values);\r\n      } catch (error) {\r\n          console.log(error);\r\n      }\r\n    }\r\n    \r\n    \r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function Navbar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    GoHost\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right' >\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }} >\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListitemAttendee({ attendees }: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment, SegmentGroup } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <SegmentGroup>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image ||'/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >\r\n                                {activity.title\r\n                            }</Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by \r\n                                <Link to={`/profiles/${activity.hostUsername}`} >{\" \" + activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </SegmentGroup>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to GoHost' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />\r\n                        }\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                      <Message.Item key={i} wrap>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationError\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to GoHost' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text >\r\n                <Header as='h1' inverted >\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    GoHost\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to GoHost' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted >\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted >\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                        loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'loading...'}: Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}            \r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n        loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createhubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body' >\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`} >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }} >{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivitytoggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`} >{activity.host?.displayName}</Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivitytoggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance} >Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username} >\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n      if (id) loadActivity(id);\r\n      return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityDetailedSideBar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationError';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - We've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer( function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";import { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n;\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: \r\nprofile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' \r\nname='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' \r\nname='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16' >\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16' >\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}> {profile?.bio} </span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Card.Group itemsPerRow={4} >\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2} >\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n          setActiveTab(0);\r\n        }\r\n        \r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\r\n        />\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history} >\n        <ScrollToTop />\n        <App />\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}